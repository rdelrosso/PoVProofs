// Source code: Tom Hollander (https://github.com/tomhollander)

  exports = function(chartId) {

    // Remember, in a real application, you should ensure your user is authenticated and authorized to view the chart before you return the signed URL.
    
    // Replace these constants with the correct values for your Charts instance

    const CHARTS_EMBEDDING_BASE_URL = '~REPLACE~CHARTS_EMBEDDING_BASE_URL'; // Replace with the base URL to your Charts instance (e.g. 'https://charts.mongodb.com/charts-christophe-demo-leoug' (no trailing slash))
    const CHARTS_TENANT_ID = '~REPLACE~CHARTS_TENANT_ID'; // Replace with your Charts Tenant ID from the Embed Chart snippet (e.g. '941a9a9b-aae3-4540-a8af-06d973e4d08d')
    const EMBEDDING_SIGNING_KEY = '~REPLACE~EMBEDDING_SIGNING_KEY'; // Replace with the Embedding Signing Key generated by your Charts admin (e.g. 'd659eb1bf3c34aea')
    const EXPIRY_TIME_SECONDS = 300; // Set to your preferred expiry period 
    const FILTER_DOCUMENT = null; // Set to a MongoDB Query document if you want to filter the chart, e.g. { foo: { $gt: 10 }}
    const AUTOREFRESH_TIME_SECONDS = 20; // Set to a number >=10 to enable the chart to autorefresh
    
    const timestamp = Math.floor(Date.now() / 1000);
    let payload = `id=${chartId}&tenant=${CHARTS_TENANT_ID}&timestamp=${timestamp}&expires-in=${EXPIRY_TIME_SECONDS}`;
    if (FILTER_DOCUMENT) {
      payload += `&filter=${encodeURIComponent(JSON.stringify(FILTER_DOCUMENT))}`;
    }
    if (AUTOREFRESH_TIME_SECONDS) {
      payload += `&autorefresh=${AUTOREFRESH_TIME_SECONDS}`;
    }
    const signature = utils.crypto.hmac(payload, EMBEDDING_SIGNING_KEY, 'sha256', 'hex');
  
    return `${CHARTS_EMBEDDING_BASE_URL}/embed/charts?${payload}&signature=${signature}`; 
  };